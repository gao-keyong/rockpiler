trans_unit = { SOI ~ definition* ~ EOI }
    definition = { function ~ TOK_NEWLINE* }
        function = { TOK_DEFINE ~ func_name ~ TOK_FUNCTION ~ TOK_LPAREN 
                        ~ func_params ~ TOK_RPAREN 
                        ~ ret_ty
                        ~ (short_block | block) }
            func_name = _{ ID }
            func_params = { typed_ids? }
            typed_ids = _{ typed_id ~ ("," ~ typed_id)* }
                typed_id = { ID ~ ":" ~ ty }
            ret_ty = { ("->" ~ ty)? }
            block = { "{" ~ statement* ~ "}" }
            short_block = { "=>" ~ expr }

ty = _{ basic_ty | user_ty | array_ty | pointer_ty | generic_ty | void_ty }
    basic_ty = { int_ty | float_ty | char_ty | str_ty | bool_ty }
        int_ty = { "i8" | "i16" | "i32" | "i64" | "i128" | "isize" 
                   | "u8" | "u16" | "u32" | "u64" | "u128" | "usize" }
        float_ty = { "f32" | "f64" }
        char_ty = { "char" }
        str_ty = { "str" }
        bool_ty = { "bool" }
    user_ty = { ID }
    array_ty = { "[" ~ array_size? ~ ty ~ "]" }
        array_size = { expr ~ "times"}
    pointer_ty = { "PtrTo" ~ "<" ~ ty ~ ">" }
    generic_ty = { ID ~ "<" ~ tys ~ ">" }
    void_ty = { "void" }

tys = { ty ~ ("," ~ ty)* }

statement = { NEWLINE* ~  (
                return_stmt
                | expr_stmt
                
             )* ~ NEWLINE }

return_stmt = { "return" ~ expr? }
expr_stmt = { expr }
    expr = { prefix* ~ primary_expr ~ postfix* ~ (infix ~ prefix* ~ primary_expr ~ postfix* )* }
        prefix = { not | pos | neg }
            not = { "not" }
            pos = { "+" }
            neg = { "-" }
        postfix = { call_access | array_access | dot_access }
            call_access = { "." ~ ID ~ TOK_LPAREN ~ call_args? ~ TOK_RPAREN }
            array_access = { "[" ~ expr ~ "]" }
                call_args = { expr ~ ("," ~ expr)* }
            dot_access = { "." ~ ID }

        infix = { infix_bitwise | infix_logic | infix_arith | infix_cmp}
            infix_bitwise = { bitws_and | bitws_or | bitws_xor | bitws_shl | bitws_shr }
                bitws_and = { "&" }
                bitws_or = { "|" }
                bitws_xor = { "^" }
                bitws_shl = { "<<" }
                bitws_shr = { ">>" }
            infix_logic = { logic_and | logic_or }
                logic_and = { "and" }
                logic_or = { "or" }
            infix_arith = { arith_add | arith_sub | arith_mul | arith_div | arith_mod }
                arith_add = { "+" }
                arith_sub = { "-" }
                arith_mul = { "*" }
                arith_div = { "/" }
                arith_mod = { "%" }
            infix_cmp = { cmp_eq | cmp_ne | cmp_lt | cmp_gt | cmp_le | cmp_ge }
                cmp_eq = { "==" }
                cmp_ne = { "!=" }
                cmp_lt = { "<" }
                cmp_gt = { ">" }
                cmp_le = { "<=" }
                cmp_ge = { ">=" }

        primary_expr = { call_expr | (TOK_LPAREN ~ expr ~ TOK_RPAREN) | ID | literal }
            call_expr = { ID ~ TOK_LPAREN ~ call_args? ~ TOK_RPAREN }
            literal = { lit_integer | lit_float | lit_str | lit_bool }
                lit_integer = { digits }
                    digits = _{ oct_digits | ( "0x" ~ hex_digits ) | dec_digits }
                lit_float = { dec_digits+ ~ "." ~ dec_digits+ }
                    hex_digits = { ASCII_HEX_DIGIT+ }
                    oct_digits = { "0" ~ ASCII_OCT_DIGIT+ }
                    dec_digits = { ASCII_DIGIT+ }
                lit_str = ${ "\"" ~ str_inner ~ "\"" }
                    str_inner = _{ (str_esc | str_char)* }
                        str_esc = ${ "\\" ~ str_char }
                        str_char = { !("\"" | "\\") ~ ANY }
                lit_bool = { TOK_TRUE | TOK_FALSE }


ID = ${ id_start ~ id_cont* }
    id_start = _{ !ASCII_DIGIT ~ id_cont }
    id_cont = _{ NON_SPECIAL | "_" }

TOK_TRUE = _{ "true" }
TOK_FALSE = _{ "false" }
TOK_LPAREN = _{ "(" }
TOK_RPAREN = _{ ")" }
TOK_DEFINE = _{ "define" }
TOK_FUNCTION = _{ "function" }
TOK_NEWLINE = _ { "\r\n" | "\n" }

NON_SPECIAL = _{ !(WHITE_SPACE | PUNCTUATION | SYMBOL) ~ ANY }

WHITESPACE = _{ " " | "\t" }
